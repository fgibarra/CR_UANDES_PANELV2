<?xml version="1.0" encoding="UTF-8"?>
<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"
    xmlns:camel="http://camel.apache.org/schema/blueprint"
    xmlns:cm="http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.1.0"
    xmlns:cxf="http://camel.apache.org/schema/blueprint/cxf"
    xmlns:jaxrs="http://cxf.apache.org/blueprint/jaxrs"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.osgi.org/xmlns/blueprint/v1.0.0 https://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd        http://camel.apache.org/schema/blueprint https://camel.apache.org/schema/blueprint/camel-blueprint-2.20.2.xsd">
    <!-- xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx -->
    <!-- CXF servers -->
    <jaxrs:server address="/ESB/panel/panelToolCambiaApellido/"
        id="rsPanelServices" staticSubresourceResolution="true">
        <jaxrs:serviceBeans>
            <ref component-id="restService"/>
        </jaxrs:serviceBeans>
        <jaxrs:providers>
            <bean class="com.fasterxml.jackson.jaxrs.json.JacksonJsonProvider"/>
        </jaxrs:providers>
    </jaxrs:server>
    <!-- xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx -->
    <!-- Consultar cuenta gmail -->
    <cxf:rsClient
        address="http://localhost:8181/cxf/ESB/panel/gmailServices/user/retrieve/{username}"
        id="consultaUserGMail" loggingFeatureEnabled="true" serviceClass="cl.uandes.panel.apiCambiaApellidoServices.api.restclient.ConsultaUserGMailEndpoint">
        <cxf:headers>
            <entry key="Content-Type" value="application/json"/>
            <entry key="Accept" value="application/json"/>
        </cxf:headers>
        <cxf:providers>
            <bean class="com.fasterxml.jackson.jaxrs.json.JacksonJsonProvider"/>
        </cxf:providers>
    </cxf:rsClient>
    <!-- Consultar cuenta nickname -->
    <cxf:rsClient
        address="http://localhost:8181/cxf/ESB/panel/gmailServices/nickName/retrieve/{username}"
        id="consultaAliasGMail" loggingFeatureEnabled="true" serviceClass="cl.uandes.panel.apiCambiaApellidoServices.api.restclient.ConsultaAliasGMailEndpoint">
        <cxf:headers>
            <entry key="Content-Type" value="application/json"/>
            <entry key="Accept" value="application/json"/>
        </cxf:headers>
        <cxf:providers>
            <bean class="com.fasterxml.jackson.jaxrs.json.JacksonJsonProvider"/>
        </cxf:providers>
    </cxf:rsClient>
    <!-- Actualiza cuenta  -->
    <cxf:rsClient
        address="http://localhost:8181/cxf/ESB/panel/gmailServices/user/update"
        id="actualizaCuentaGMail" loggingFeatureEnabled="true" serviceClass="cl.uandes.panel.apiCambiaApellidoServices.api.restclient.ActualizaCuentaGMailEndpoint">
        <cxf:headers>
            <entry key="Content-Type" value="application/json"/>
            <entry key="Accept" value="application/json"/>
        </cxf:headers>
        <cxf:providers>
            <bean class="com.fasterxml.jackson.jaxrs.json.JacksonJsonProvider"/>
        </cxf:providers>
    </cxf:rsClient>
    <!-- Enviar mail -->
    <cxf:rsClient address="http://localhost:8181/cxf/ESB/mail/send"
        id="sendMail" loggingFeatureEnabled="true" serviceClass="cl.uandes.panel.apiCambiaApellidoServices.api.restclient.SendMailEndpoint">
        <cxf:headers>
            <entry key="Content-Type" value="application/json"/>
            <entry key="Accept" value="application/json"/>
        </cxf:headers>
        <cxf:providers>
            <bean class="com.fasterxml.jackson.jaxrs.json.JacksonJsonProvider"/>
        </cxf:providers>
    </cxf:rsClient>
    <!-- xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx -->
    <bean
        class="cl.uandes.panel.apiCambiaApellidoServices.api.resources.CambiaApellidoRestService" id="restService"/>
    <bean
        class="cl.uandes.panel.apiCambiaApellidoServices.procesor.RecuperaDeBanner" id="recuperaDeBanner"/>
    <bean
        class="cl.uandes.panel.apiCambiaApellidoServices.procesor.GeneraNextLoginName" id="generaNextLoginName"/>
    <bean
        class="cl.uandes.panel.apiCambiaApellidoServices.procesor.BuscaEnGmail" id="buscaEnGmail"/>
    <bean
        class="cl.uandes.panel.apiCambiaApellidoServices.procesor.ArmaDatosUpdate" id="armaDatosUpdate"/>
    <bean
        class="cl.uandes.panel.apiCambiaApellidoServices.procesor.CambiaGmail" id="cambiaGmail"/>
    <bean
        class="cl.uandes.panel.apiCambiaApellidoServices.procesor.PreparaUndo" id="preparaUndo"/>
    <bean
        class="cl.uandes.panel.apiCambiaApellidoServices.procesor.RecuperaMailSoporte" id="recuperaMailSoporte"/>
    <bean
        class="cl.uandes.panel.apiCambiaApellidoServices.procesor.PreparaTemplateMail" id="preparaTemplateMail"/>
    <bean
        class="cl.uandes.panel.apiCambiaApellidoServices.procesor.PreparaDatosMail" id="preparaDatosMail"/>
    <bean
        class="cl.uandes.panel.apiCambiaApellidoServices.procesor.PreparaResponse" id="preparaResponse"/>
    <bean
        class="cl.uandes.panel.apiCambiaApellidoServices.procesor.GeneraResponseError" id="generaResponseError"/>
    <bean
        class="cl.uandes.panel.apiCambiaApellidoServices.procesor.DefineResultadoActualizacionGmail" id="defineResultadoActualizacionGmail"/>
    <bean
        class="cl.uandes.panel.apiCambiaApellidoServices.bean.MensajesErrorBean" id="mensajesError">
        <property name="notFoundBanner" value="{{serv.cambiaApellido.notFoundBanner}}"/>
        <property name="noPudoAccederGmail" value="{{serv.cambiaApellido.noPudoAccederGmail}}"/>
        <property name="notFoundPanel" value="{{serv.cambiaApellido.notFoundPanel}}"/>
        <property name="actualizaGmail" value="{{serv.cambiaApellido.actualizaGmail}}"/>
    </bean>
    <!-- xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx -->
    <!-- ==================================================================================================== -->
    <reference availability="mandatory"
        filter="(osgi.jndi.service.name=bannerds)" id="bannerDataSource" interface="javax.sql.DataSource"/>
    <!-- ==================================================================================================== -->
    <camelContext id="serv-cambia-apellido-v1" trace="false" xmlns="http://camel.apache.org/schema/blueprint">
        <propertyPlaceholder id="properties" location="file:${karaf.home}/etc/cl.uandes.panelv2.cfg"/>
        <route id="_readjson">
            <from id="_promService" uri="direct:start?timeout=-1"/>
            <!-- ================================================================================  -->
            <!-- 
				- Buscar los datos del alumno/profesor en Banner
				- armar el nuevo nombre: primera letra primer nombre + primera letra segundo nombre - apellido paterno
				- encontrar en MI_CUENTAS_GMAIL un login_name que no exista, usar un numero de secuencia.
				- validar que la nueva cuenta no exista en GMAIL como cuenta o nickname. si existe incrementar el numero de secuencia hasta encontrar uno que no exista
				- recuperar los datos actuales de la cuenta para el rut del usuario
				- cambiar en MI_CUENTAS_GMAIL, GOREMAL el nuevo LOGIN_NAME. Guardar el antiguo por si rollback
				- cambiar la cuenta en GMAIL (incluir nombres y apellidos recuperados de Banner). Si falla, hacer rollback en la BD. 
			-->
            <!-- ___________________________________________________________________  -->
            <onException id="_onExceptionBanner">
                <exception>cl.uandes.panel.apiCambiaApellidoServices.procesor.exceptions.NotFoundBannerException</exception>
                <camel:handled>
                    <camel:constant>true</camel:constant>
                </camel:handled>
                <setBody id="_setBody11">
                    <method method="notFoundBannerException" ref="mensajesError"/>
                </setBody>
                <process id="_generaResponseError1" ref="generaResponseError"/>
                <to id="_final1" uri="mock:end"/>
            </onException>
            <onException id="_onExceptionGmail">
                <exception>cl.uandes.panel.apiCambiaApellidoServices.procesor.exceptions.NoPudoAccederGmailException</exception>
                <camel:handled>
                    <camel:constant>true</camel:constant>
                </camel:handled>
                <setBody id="_setBody12">
                    <method method="noPudoAccederGmailException" ref="mensajesError"/>
                </setBody>
                <process id="_generaResponseError2" ref="generaResponseError"/>
                <to id="_final2" uri="mock:end"/>
            </onException>
            <onException id="_onExceptionPanel">
                <exception>cl.uandes.panel.apiCambiaApellidoServices.procesor.exceptions.NotFoundPanelException</exception>
                <camel:handled>
                    <camel:constant>true</camel:constant>
                </camel:handled>
                <setBody id="_setBody13">
                    <method method="getNotFoundPanel" ref="mensajesError"/>
                </setBody>
                <process id="_generaResponseError3" ref="generaResponseError"/>
                <to id="_final3" uri="mock:end"/>
            </onException>
            <onException id="_onExceptionActualizaGmail">
                <exception>cl.uandes.panel.apiCambiaApellidoServices.procesor.exceptions.ActualizaGmailException</exception>
                <exception>javax.ws.rs.ClientErrorException</exception>
                <camel:handled>
                    <camel:constant>true</camel:constant>
                </camel:handled>
                <setBody id="_setBody14">
                    <method method="getActualizaGmail" ref="mensajesError"/>
                </setBody>
                <setHeader headerName="funcionPrd" id="_setHeader2">
                    <constant>UNDO</constant>
                </setHeader>
                <to id="_undoBD" uri="sql-stored:pck_funciones.prd_updateCuenta_goremal('p_funcion' java.sql.Types.VARCHAR  ${header.funcionPrd},'p_key' java.sql.Types.NUMBER ${header.DatosMiCuentaGmail_old.key}, 'p_login_name', java.sql.Types.VARCHAR ${header.DatosMiCuentaGmail_old.loginName, 'p_nombres', java.sql.Types.VARCHAR ${header.DatosMiCuentaGmail_old.nombres, 'p_apellidos' java.sql.Types.VARCHAR ${header.DatosMiCuentaGmail_old.apellidos, 'p_rowid' java.sql.Types.VARCHAR ${header.DatosMiCuentaGmail_old.rowid}, OUT java.sql.Types.VARCHAR nuevo_rowid, OUT java.sql.Types.VARCHAR resultado_update)?dataSource=#bannerDataSource"/>
                <process id="_generaResponseError4" ref="generaResponseError"/>
                <to id="_final4" uri="mock:end"/>
            </onException>
            <!-- ******************************************************************** -->
            <choice id="_cuentaorut">
                <when id="_whenRut">
                    <simple>${header.operacion} == 'porRUT'</simple>
                    <doTry id="_doTryQryBanner">
                        <!-- 
						- Buscar los datos del alumno/profesor en Banner
						- en base a los datos de Banner proponer un nombre de cuenta y dejarlo en el Body
						- para validar que no este repetido posteriormente
					-->
                        <log id="_log2" message="rut solicitado: ${header.CambiaCuentaRequest.rut}"/>
                        <to id="_qryBanner" uri="sql:select spriden_pidm, spriden_id, spriden_last_name, spriden_first_name, spriden_mi from spriden where spriden_change_ind is null and spriden_id = :#${header.CambiaCuentaRequest.rut}?dataSource=#bannerDataSource"/>
                        <process id="_recuperaDeBanner" ref="recuperaDeBanner"/>
                        <!-- queda en ${body} y en ${header.new_login_name} el loginName propuesto en base a nombres/apellido
  		 				     en el body viene incluido el %
					   - Queda en header.DatosUsuarioBannerDTO datos leidos desde Banner
					   - armar el nuevo nombre: primera letra primer nombre + primera letra segundo nombre - apellido paterno
					-->
                        <log id="_log1" message="loginName propuesto: ${body} "/>
                    </doTry>
                </when>
                <when id="_whenCuenta">
                    <simple>${header.operacion} == 'porCuenta'</simple>
                    <!--
					- colocar el nombre de cuenta solicitado para validalo en GMAIL como cuenta o nickname.
					- si existe incrementar el numero de secuencia hasta encontrar uno que no exista
				-->
                    <setBody id="_setBody1">
                        <simple>${header.CambiaCuentaRequest.nuevoNombreCuenta}</simple>
                    </setBody>
                </when>
            </choice>
            <!-- 
			- encontrar en MI_CUENTAS_GMAIL un login_name que no exista, usar un numero de secuencia.
			- validar que la nueva cuenta no exista en GMAIL como cuenta o nickname. si existe incrementar el numero de secuencia hasta encontrar uno que no exista
			- cambiar en MI_CUENTAS_GMAIL, GOREMAL el nuevo LOGIN_NAME. Guardar el antiguo por si rollback
			- cambiar la cuenta en GMAIL (incluir nombres y apellidos recuperados de Banner). Si falla, hacer rollback en la BD. 
			-->
            <log id="_log5" message="antes de qryLogin body: ${body} header.buscaLogin: ${header.buscaLogin}"/>
            <to id="_qryLogin" uri="sql:select login_name from mi_cuentas_gmail where login_name like :#${body}?dataSource=#bannerDataSource"/>
            <process id="_getNextLoginName" ref="generaNextLoginName"/>
            <!-- queda en ${header.new_login_name} el loginName propuesto o el siguiente en la secuencia 
				si esta compuesto por base + secuencia quedan header.new_login_name_base y header.new_login_name_seq
			-->
            <log id="_log3" message="propuesto: new_login_name: ${header.new_login_name} new_login_name_base: ${header.new_login_name_base} new_login_name_seq: ${header.new_login_name_seq}"/>
            <doTry id="_doTryQryGMail">
                <loop doWhile="true" id="_loopBuscaEnGmail">
                    <simple>${header.foundName} == 1</simple>
                    <process id="_buscaEnGmail" ref="buscaEnGmail"/>
                </loop>
            </doTry>
            <log id="_log6" message="busca datos para header.CambiaCuentaRequest.rut: ${header.CambiaCuentaRequest.rut}"/>
            <to id="_qryDatosActualesCuenta" uri="sql:select m.key, m.moodle_id, m.banner_pidm, m.login_name, m.nombres, m.apellidos, m.id_gmail, g.rowid, g.goremal_email_address from mi_cuentas_gmail m, goremal g where moodle_id=:#${header.CambiaCuentaRequest.rut} and g.goremal_pidm (+) = nvl(m.banner_pidm,0) and g.goremal_preferred_ind (+) = 'Y'?dataSource=#bannerDataSource"/>
            <process id="_armaDatosUpdate" ref="armaDatosUpdate"/>
            <log id="_log4" message="funcionPrd: ${header.funcionPrd} key: ${header.DatosMiCuentaGmail_new.key} loginName: ${header.DatosMiCuentaGmail_new.loginName} nombres: ${header.DatosMiCuentaGmail_new.nombres} apellidos: ${header.DatosMiCuentaGmail_new.apellidos} rowid: ${header.DatosMiCuentaGmail_new.rowid}"/>
            <log id="_log7" message="sql-stored:pck_funciones.prd_updateCuenta_goremal('p_funcion' java.sql.Types.VARCHAR ${header.funcionPrd},'p_key' java.sql.Types.NUMERIC ${header.DatosMiCuentaGmail_new.key},'p_login_name' java.sql.Types.VARCHAR ${header.DatosMiCuentaGmail_new.loginName}, 'p_nombres' java.sql.Types.VARCHAR ${header.DatosMiCuentaGmail_new.nombres},'p_apellidos' java.sql.Types.VARCHAR ${header.DatosMiCuentaGmail_new.apellidos},'p_rowid' java.sql.Types.VARCHAR ${header.DatosMiCuentaGmail_new.rowid},OUT java.sql.Types.VARCHAR out_nuevo_rowid,OUT java.sql.Types.VARCHAR out_resultado_update)?dataSource=#bannerDataSource"/>
            <to id="_updateSademail" uri="sql-stored:pck_funciones.prd_updateCuenta_goremal('p_funcion' java.sql.Types.VARCHAR ${header.funcionPrd},'p_key' java.sql.Types.NUMERIC ${header.DatosMiCuentaGmail_new.key},'p_login_name' java.sql.Types.VARCHAR ${header.DatosMiCuentaGmail_new.loginName}, 'p_nombres' java.sql.Types.VARCHAR ${header.DatosMiCuentaGmail_new.nombres},'p_apellidos' java.sql.Types.VARCHAR ${header.DatosMiCuentaGmail_new.apellidos},'p_rowid' java.sql.Types.VARCHAR ${header.DatosMiCuentaGmail_new.rowid},OUT java.sql.Types.VARCHAR out_nuevo_rowid,OUT java.sql.Types.VARCHAR out_resultado_update)?dataSource=#bannerDataSource"/>
            <choice id="_resultadoUpdate">
                <when id="_fallo">
                    <simple>${header.resultado_update} != 'OK'</simple>
                    <setBody id="_setBody15">
                        <simple>${header.resultado_update}</simple>
                    </setBody>
                    <process id="_generaResponseError" ref="generaResponseError"/>
                    <to id="_final5" uri="mock:end"/>
                </when>
            </choice>
            <doTry id="_actualizaGMail">
                <process id="_cambiaGmail" ref="cambiaGmail"/>
                <setHeader headerName="CamelHttpMethod" id="_setHeader3">
                    <constant>PUT</constant>
                </setHeader>
                <to id="_servicioGmail" uri="cxfrs:bean:actualizaCuentaGMail"/>
            </doTry>
            <process id="_defineResultadoActualizacion" ref="defineResultadoActualizacionGmail"/>
            <log id="_log8" message="header.resultadoActualizacionGmail: ${header.resultadoActualizacionGmail}"/>
            <choice id="_choiceResultado">
                <when id="_fallo1">
                    <simple>${header.resultadoActualizacionGmail} != 0</simple>
                    <setHeader headerName="funcionPrd" id="_setHeaderUNDO">
                        <constant>UNDO</constant>
                    </setHeader>
                    <log id="_log9" message="resultado actualizacion gmail funcionPrd: ${header.funcionPrd}"/>
                    <log id="_log10" message="sql-stored:pck_funciones.prd_updateCuenta_goremal('p_funcion' java.sql.Types.VARCHAR  ${header.funcionPrd},'p_key' java.sql.Types.NUMERIC ${header.DatosMiCuentaGmail_old.key},'p_login_name' java.sql.Types.VARCHAR ${header.DatosMiCuentaGmail_old.loginName}, 'p_nombres' java.sql.Types.VARCHAR ${header.DatosMiCuentaGmail_old.nombres}, 'p_apellidos' java.sql.Types.VARCHAR ${header.DatosMiCuentaGmail_old.apellidos}, 'p_rowid' java.sql.Types.VARCHAR ${header.DatosMiCuentaGmail_old.rowid}, OUT java.sql.Types.VARCHAR out_nuevo_rowid, OUT java.sql.Types.VARCHAR out_resultado_update)?dataSource=#bannerDataSource"/>
                    <to id="_undoBD1" uri="sql-stored:pck_funciones.prd_updateCuenta_goremal('p_funcion' java.sql.Types.VARCHAR ${header.funcionPrd},'p_key' java.sql.Types.NUMERIC ${header.DatosMiCuentaGmail_old.key},'p_login_name' java.sql.Types.VARCHAR ${header.DatosMiCuentaGmail_old.loginName}, 'p_nombres' java.sql.Types.VARCHAR ${header.DatosMiCuentaGmail_old.nombres}, 'p_apellidos' java.sql.Types.VARCHAR ${header.DatosMiCuentaGmail_old.apellidos}, 'p_rowid' java.sql.Types.VARCHAR ${header.DatosMiCuentaGmail_old.rowid}, OUT java.sql.Types.VARCHAR out_nuevo_rowid, OUT java.sql.Types.VARCHAR out_resultado_update)?dataSource=#bannerDataSource"/>
                    <setHeader headerName="resultadoProceso" id="_setHeaderKO">
                        <constant>KO</constant>
                    </setHeader>
                </when>
                <otherwise id="_funciono">
                    <setHeader headerName="resultadoProceso" id="_setHeaderOK">
                        <constant>OK</constant>
                    </setHeader>
                    <log id="_log11" message="resultado actualizacion gmail funcionPrd: ${header.funcionPrd}"/>
                </otherwise>
            </choice>
            <!--
				- si se solicito en el request, 
					- si request.cuentas-envio es nulo enviar email a soporte con el resultado de la operacion (nombre nueva cuenta)
					- caso contrario enviarlo a las cuentas indicadas en request 
				- armar respuesta para el webservice
			-->
            <choice id="_mandamail">
                <when id="_simandamail">
                    <simple>${header.CambiaCuentaRequest.enviaMail} == true &amp;&amp; ${header.resultadoProceso} == 'OK'</simple>
                    <choice id="_indicaTo">
                        <when id="_asoporte">
                            <simple>${header.CambiaCuentaRequest.cuentasEnvio} == null</simple>
                            <to id="_qrySoporte" uri="sql:select email_support from kco_sendmail_params where key={{sendmail_params_id}}?dataSource=#bannerDataSource"/>
                            <process id="_recuperaMailSoporte" ref="recuperaMailSoporte"/>
                        </when>
                        <otherwise id="_aloindicado">
                            <setHeader headerName="emailTO" id="_setHeader1">
                                <simple>${header.CambiaCuentaRequest.cuentasEnvio}</simple>
                            </setHeader>
                        </otherwise>
                    </choice>
                    <process id="_preparaTemplateMail" ref="preparaTemplateMail"/>
                    <to id="creaCuerpo" uri="velocity:templateMail.vm?contentCache=true"/>
					
					<!-- manda email -->
		            <setHeader headerName="cc" id="_setHeaderContent">
		                <simple>{{serv.cambiaApellido.mail_cc}}</simple>
		            </setHeader>
		            <setHeader headerName="contentType" id="_setHeaderContent">
		                <simple>text/html;charset=ISO-8859-1</simple>
		            </setHeader>
					<to uri="smtps://smtp.gmail.com?username={{serv.cambiaApellido.mail_username}}&amp;password={{serv.cambiaApellido.mail_password}}&amp;from={{serv.cambiaApellido.mail_from}}&amp;contentType=text/html;charset=ISO-8859-1"/>

                </when>
            </choice>
            <process id="_preparaResponse" ref="preparaResponse"/>
        </route>
    </camelContext>
</blueprint>
